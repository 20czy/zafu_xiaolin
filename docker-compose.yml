version: '3.8'

services:
  # 数据库服务 - 最先启动
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: agent
      POSTGRES_USER: charn
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # FastAPI服务
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: fastapi_service
    ports:
      - "8001:8000"
    volumes:
      - ./fastapi:/app
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=agent
      - DB_USER=charn
      - DB_PASSWORD=123456
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Django后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./media:/app/media
    environment:
      - PYTHONPATH=/app
      - DJANGO_SETTINGS_MODULE=main.settings
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=agent
      - DB_USER=charn
      - DB_PASSWORD=123456
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=1
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/my-app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_FASTAPI_URL=http://localhost:8001
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
      - fastapi
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: